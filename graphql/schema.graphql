"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    getUserById(id: Int!): User!
        @field(resolver: "App\\GraphQL\\Queries\\User@getUserById")

    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: Int @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String
            @eq
            @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    users: [User!]! @field(resolver: "App\\GraphQL\\Queries\\User@getUsers")

    unlikedUsers(userId: Int!): [User!]!
        @field(resolver: "App\\GraphQL\\Queries\\User@getUnlikedUsers")

    likes: [Like!]! @all
}

type Mutation {
    like(from: Int!, to: Int!, isLike: Boolean!): Boolean
        @field(resolver: "App\\GraphQL\\Mutations\\Like@like")
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: Int!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    profile_img_path: String!

    "When the account was created."
    created_at: DateTime

    "When the account was last updated."
    updated_at: DateTime
}

type Like {
    id: Int!
    from: Int!
    to: Int!
    is_super: Boolean
    is_like: Boolean
}
